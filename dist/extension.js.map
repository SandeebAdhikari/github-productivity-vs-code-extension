{"version":3,"file":"extension.js","mappings":"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","sources":["webpack://github-productivity-vs-code-extension/./src/auth.ts","webpack://github-productivity-vs-code-extension/./src/extension.ts","webpack://github-productivity-vs-code-extension/./src/scheduler.ts","webpack://github-productivity-vs-code-extension/./src/watcher.ts","webpack://github-productivity-vs-code-extension/external commonjs \"@octokit/rest\"","webpack://github-productivity-vs-code-extension/external commonjs \"child_process\"","webpack://github-productivity-vs-code-extension/external commonjs \"vscode\"","webpack://github-productivity-vs-code-extension/webpack/bootstrap","webpack://github-productivity-vs-code-extension/webpack/startup"],"sourcesContent":["import * as vscode from \"vscode\";\n\nexport async function authenticateWithGitHub(): Promise<string | null> {\n  try {\n    // Ask the user to sign in with GitHub\n    const session = await vscode.authentication.getSession(\"github\", [\"repo\"], {\n      createIfNone: true,\n    });\n\n    if (session) {\n      return session.accessToken; // Return the access token for GitHub API requests\n    } else {\n      vscode.window.showErrorMessage(\"Failed to authenticate with GitHub.\");\n      return null;\n    }\n  } catch (error) {\n    if (error instanceof Error) {\n      vscode.window.showErrorMessage(\n        `GitHub authentication error: ${error.message}`\n      );\n    } else {\n      vscode.window.showErrorMessage(\n        `GitHub authentication failed with an unknown error.`\n      );\n    }\n    return null;\n  }\n}\n","import * as vscode from \"vscode\";\nimport { authenticateWithGitHub } from \"./auth\";\nimport { startFileWatcher } from \"./watcher\";\nimport { scheduleCommits } from \"./scheduler\";\nimport { Octokit } from \"@octokit/rest\";\n\nexport async function activate(context: vscode.ExtensionContext) {\n  vscode.window.showInformationMessage(\n    \"GitHub Productivity Extension Activated!\"\n  );\n\n  // Command to initialize the code-tracking repository\n  const initRepoCommand = vscode.commands.registerCommand(\n    \"extension.initRepo\",\n    async () => {\n      try {\n        // Authenticate the user\n        const token = await authenticateWithGitHub();\n        if (!token) {\n          vscode.window.showErrorMessage(\"GitHub authentication failed.\");\n          return;\n        }\n\n        const octokit = new Octokit({ auth: token });\n\n        // Automatically create a new repository\n        const repoName = \"code-tracking\";\n        vscode.window.showInformationMessage(\n          `Creating repository '${repoName}' on GitHub...`\n        );\n\n        const response = await octokit.repos.createForAuthenticatedUser({\n          name: repoName,\n          private: true,\n          auto_init: true,\n        });\n\n        const repoUrl = response.data.ssh_url;\n        vscode.window.showInformationMessage(`Repository created: ${repoUrl}`);\n\n        // Initialize the repository locally and set up the remote\n        const terminal = vscode.window.createTerminal(\"Git Init\");\n        terminal.show();\n        terminal.sendText(`git init && git remote add origin ${repoUrl}`);\n      } catch (error: unknown) {\n        if (error instanceof Error) {\n          vscode.window.showErrorMessage(\n            `Failed to create repository: ${error.message}`\n          );\n        } else {\n          vscode.window.showErrorMessage(\n            \"An unknown error occurred while creating the repository.\"\n          );\n        }\n      }\n    }\n  );\n\n  context.subscriptions.push(initRepoCommand);\n\n  // Start file watcher\n  startFileWatcher(context);\n\n  // Start commit scheduler\n  scheduleCommits(context);\n}\n\nexport function deactivate() {\n  vscode.window.showInformationMessage(\n    \"GitHub Productivity Extension Deactivated!\"\n  );\n}\n","import { exec } from \"child_process\";\nimport * as vscode from \"vscode\";\nimport { getChangeSummary } from \"./watcher\";\n\nexport function scheduleCommits(context: vscode.ExtensionContext) {\n  // Schedule commits every 30 minutes\n  setInterval(() => {\n    // Generate the commit message based on changes\n    const commitMessage = getChangeSummary();\n\n    // Skip committing if no changes were detected\n    if (!commitMessage) {\n      console.log(\n        \"No significant changes in the last 30 minutes. Skipping commit.\"\n      );\n      return;\n    }\n\n    // Log the operation for debugging\n    console.log(\"Scheduling commit with message:\", commitMessage);\n\n    // Execute Git commands\n    exec(\n      `git add . && git commit -m \"${commitMessage}\" && git push`,\n      (error, stdout, stderr) => {\n        if (error) {\n          vscode.window.showErrorMessage(\n            `Failed to commit and push: ${error.message}`\n          );\n          console.error(\"Commit error:\", error.message);\n          console.error(\"Commit stderr:\", stderr);\n        } else {\n          vscode.window.showInformationMessage(\n            `Changes committed successfully: ${commitMessage}`\n          );\n          console.log(\"Commit stdout:\", stdout);\n        }\n      }\n    );\n  }, 30 * 60 * 1000); // Run every 30 minutes\n}\n","import * as vscode from \"vscode\";\n\nconst changeLog: { added: string[]; modified: string[]; deleted: string[] } = {\n  added: [],\n  modified: [],\n  deleted: [],\n};\n\nexport function startFileWatcher(context: vscode.ExtensionContext) {\n  const watcher = vscode.workspace.createFileSystemWatcher(\"**/*\");\n\n  console.log(\"File watcher activated\");\n\n  watcher.onDidCreate((uri) => {\n    console.log(`File created: ${uri.fsPath}`);\n    if (!changeLog.added.includes(uri.fsPath)) {\n      changeLog.added.push(uri.fsPath);\n    }\n  });\n\n  watcher.onDidChange((uri) => {\n    console.log(`File modified: ${uri.fsPath}`);\n    if (!changeLog.modified.includes(uri.fsPath)) {\n      changeLog.modified.push(uri.fsPath);\n    }\n  });\n\n  watcher.onDidDelete((uri) => {\n    console.log(`File deleted: ${uri.fsPath}`);\n    if (!changeLog.deleted.includes(uri.fsPath)) {\n      changeLog.deleted.push(uri.fsPath);\n    }\n  });\n\n  return watcher;\n}\n\nexport function getChangeSummary(): string {\n  const summary: string[] = [];\n\n  if (changeLog.added.length > 0) {\n    summary.push(`Added: ${changeLog.added.join(\", \")}`);\n  }\n  if (changeLog.modified.length > 0) {\n    summary.push(`Modified: ${changeLog.modified.join(\", \")}`);\n  }\n  if (changeLog.deleted.length > 0) {\n    summary.push(`Deleted: ${changeLog.deleted.join(\", \")}`);\n  }\n\n  // Clear the log after generating the summary\n  changeLog.added = [];\n  changeLog.modified = [];\n  changeLog.deleted = [];\n\n  return summary.join(\" | \");\n}\n","module.exports = require(\"@octokit/rest\");","module.exports = require(\"child_process\");","module.exports = require(\"vscode\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(265);\n"],"names":["async","session","vscode","authentication","getSession","createIfNone","accessToken","window","showErrorMessage","error","Error","message","context","showInformationMessage","initRepoCommand","commands","registerCommand","token","authenticateWithGitHub","octokit","Octokit","auth","repoName","repoUrl","repos","createForAuthenticatedUser","name","private","auto_init","data","ssh_url","terminal","createTerminal","show","sendText","subscriptions","push","startFileWatcher","scheduleCommits","setInterval","commitMessage","getChangeSummary","console","log","exec","stdout","stderr","watcher","workspace","createFileSystemWatcher","onDidCreate","uri","fsPath","changeLog","added","includes","onDidChange","modified","onDidDelete","deleted","summary","length","join","module","exports","require","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","call"],"sourceRoot":""}